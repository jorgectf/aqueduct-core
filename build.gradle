buildscript {
    repositories {
        maven {
            url "https://nexus.ourtesco.com/repository/maven-central/"
            if (project.hasProperty('mavenCloudUsername')) {
                credentials {
                    username "$mavenCloudUsername"
                    password "$mavenCloudPassword"
                }
            }
        }

    jcenter {
        url "https://nexus.ourtesco.com/repository/jcentral/"
        if (project.hasProperty('mavenCloudUsername')) {
            credentials {
                username "$mavenCloudUsername"
                password "$mavenCloudPassword"
            }
        }
    }

        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.projectlombok:lombok:1.18.2'
        classpath 'io.franzbecker:gradle-lombok:1.14'
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
        classpath 'gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:0.5'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE'
        classpath 'pl.allegro.tech.build:axion-release-plugin:1.10.0'
        classpath 'com.adarshr:gradle-test-logger-plugin:1.6.0'
        classpath 'gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.0'
        classpath 'org.owasp:dependency-check-gradle:5.0.0-M3.1'
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.5'
    }
}

plugins {
    id "com.google.osdetector" version "1.6.2"
}

apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'pl.allegro.tech.build.axion-release'

dependencyCheck {

    failOnError = false

    data {
        directory="$System.env.HOME/.owasp"
    }

    analyzers {
        assemblyEnabled = false
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = "0.8.4"
        reportsDir = file("${rootProject.buildDir}/reports/jacoco/${project.name}")
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'io.franzbecker.gradle-lombok'
    apply plugin: 'project-report'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'pmd'

    lombok {
        version = "1.18.2"
    }

    task packageSources(type: Jar, dependsOn: 'classes') {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    artifacts {
        archives packageSources
    }

    ext {
        addMicronautDependencies = {
            project.dependencies {
                if (project.name != "pipe-common") {
                    implementation project(":pipe-common")
                }

                // order is important
                implementation 'org.projectlombok:lombok:1.18.2'
                annotationProcessor 'org.projectlombok:lombok:1.18.2'
                implementation 'io.micronaut:micronaut-inject-java'
                annotationProcessor 'io.micronaut:micronaut-inject-java'

                implementation 'io.swagger.core.v3:swagger-annotations'

                implementation 'io.micronaut.security:micronaut-security-annotations'
                implementation 'io.micronaut.security:micronaut-security-jwt'
                implementation 'io.micronaut:micronaut-management'
                implementation 'io.micronaut.micrometer:micronaut-micrometer-core'
                implementation 'io.micronaut.tracing:micronaut-tracing-core:4.0.3'
                implementation 'javax.cache:cache-api:1.1.1'

                implementation 'io.micronaut:micronaut-inject'
                implementation 'io.micronaut:micronaut-runtime'

                implementation "io.micronaut.rxjava2:micronaut-rxjava2"

                testImplementation 'io.micronaut:micronaut-inject-groovy'
                testImplementation 'io.micronaut.test:micronaut-test-spock'
                testImplementation 'io.micronaut.test:micronaut-test-junit5'
                testImplementation 'org.spockframework:spock-junit4:2.0-M3-groovy-3.0'
            }
        }

        addSlf4jDependencies = {
            project.dependencies {
                implementation 'org.slf4j:slf4j-api'
            }
        }

        addBrotliTestDependencies = {
            project.dependencies {
                testImplementation('com.nixxcode.jvmbrotli:jvmbrotli:0.2.0') {
                        testImplementation('com.nixxcode.jvmbrotli:jvmbrotli-darwin-x86-amd64:0.2.0')
                        testImplementation('com.nixxcode.jvmbrotli:jvmbrotli-linux-x86-amd64:0.2.0')
                        testImplementation('com.nixxcode.jvmbrotli:jvmbrotli-win32-x86-amd64:0.2.0')
                        testImplementation('com.nixxcode.jvmbrotli:jvmbrotli-win32-x86:0.2.0')
                }
            }
        }

        addPublish = {
            project.apply plugin: "maven-publish"

            project.publishing {

                repositories {
                    maven {
                        url = "https://nexus.ourtesco.com/repository/Messaging/"

                        if (project.hasProperty('mavenCloudUsername')) {
                            credentials {
                                username "$mavenCloudUsername"
                                password "$mavenCloudPassword"
                            }
                        }
                    }

                    publications {
                        maven(MavenPublication) {
                            artifactId = "aqueduct-${project.name}"
                            from components.java
                            artifact packageSources
                        }
                    }
                }
            }
        }
    }

    spotbugs {
        ignoreFailures = true
        effort = "max"
    }

    pmd {
        toolVersion = '6.21.0'
        ignoreFailures = true

        ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-design',
            'java-empty',
            'java-imports',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
        ]
    }

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    group 'com.tesco.aqueduct'

    version scmVersion.version

    jar {
        manifest {
            attributes 'Specification-Version': scmVersion.version
            attributes 'Implementation-Title': 'com.tesco.aqueduct.pipe'
            attributes 'Implementation-Version': scmVersion.version
        }
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom 'io.micronaut:micronaut-bom:3.3.1'
        }
    }

    dependencies {
        // Groovy and Spock dependencies
        testImplementation 'org.codehaus.groovy:groovy-all:3.0.5'
        testImplementation 'org.spockframework:spock-core:2.0-M3-groovy-3.0'
        testImplementation 'io.rest-assured:rest-assured:4.3.1'

        testImplementation 'com.stehno.ersatz:ersatz:2.0.0:safe@jar'

        testImplementation 'ch.qos.logback:logback-classic:1.2.3'
        testImplementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
        testImplementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
        
        testImplementation 'net.bytebuddy:byte-buddy:1.9.6' // allows mocking of classes (in addition to interfaces)
        testImplementation 'org.objenesis:objenesis:2.6'    // allows mocking of classes without default constructor (together with CGLIB)

        testImplementation 'io.micronaut:micronaut-inject-groovy'
        testAnnotationProcessor 'io.micronaut:micronaut-inject-groovy' // allows testing using MicronautTest framework
        testImplementation 'io.micronaut.test:micronaut-test-spock'

        testImplementation 'com.sun.activation:javax.activation:1.2.0'
    }

    // add -parameters to java compile have Jackson happy
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-parameters'
    }

    // integration test src set
    sourceSets {
        integration {
            groovy {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir 'src/integration/groovy'
            }
            resources.srcDir file('src/integration/resources')
        }
    }

    configurations {
        integrationImplementation.extendsFrom testImplementation
        integrationRuntimeOnly.extendsFrom testRuntimeOnly
    }

    task integration(type: Test, dependsOn: compileGroovy) {
        testClassesDirs = sourceSets.integration.output.classesDirs
        classpath = sourceSets.integration.runtimeClasspath
    }

    // test would run fast tests, check would run all, same with build
    check.dependsOn integration
    integration.mustRunAfter test

    jacocoTestReport {
        reports {
            xml.enabled = false
            csv.enabled = false
            html.enabled = true
        }
        dependsOn(test, integration)
    }
    test {
        useJUnitPlatform()
    }

    integration {
        useJUnitPlatform()
    }
}

scmVersion {
    useHighestVersion = true
}

task jacocoMerge(type: JacocoMerge) {
    dependsOn = subprojects.jacocoTestReport
    executionData files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() }
}

task jacocoRootReport(type: JacocoReport) {
    onlyIf = { true }
    executionData(jacocoMerge.executionData)

    reports {
        xml.enabled = false
        csv.enabled = false
        html.enabled = true
    }
    dependsOn(jacocoMerge)
}
